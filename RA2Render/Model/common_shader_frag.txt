#version 330 core

struct Material {
	float shininess;
}; 

struct Light {
	//vec3 position;
	vec3 direction;
	vec3 color;
	float ambient;
	float diffuse;
	float specular;
};

in vec3 Normal;
in vec3 FragPos;
in vec4 Color;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

out vec4 FragColor;

void main()
{
	// ambient
	vec3 ambient = light.ambient * light.color;
	
	// diffuse 
	vec3 norm = normalize(Normal);
	// vec3 lightDir = normalize(light.position - FragPos);
	vec3 lightDir = normalize(-light.direction);  
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * light.color;  
	
	// specular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * light.color;  
		
	vec3 result = (ambient + diffuse + specular) * vec3(Color);
	FragColor = vec4(result, Color.w);
}

